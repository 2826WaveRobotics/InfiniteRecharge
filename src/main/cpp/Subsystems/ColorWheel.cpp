// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/ColorWheel.h"
#include "Reference.h"

using namespace rev;

ColorWheel::ColorWheel() : frc::Subsystem("ColorWheel") {

    colorMotor.reset(new WPI_TalonSRX(COLOR_WHEEL));

    //Need to register all of the colors
   m_colorMatcher.AddColorMatch(kBlueTarget);
   m_colorMatcher.AddColorMatch(kGreenTarget);
   m_colorMatcher.AddColorMatch(kYellowTarget);
   m_colorMatcher.AddColorMatch(kRedTarget);


}



// void ColorWheel::InitDefaultCommand() {
//     // Set the default command for a subsystem here.
//     // SetDefaultCommand(new MySpecialCommand());

// }

// void ColorWheel::Periodic() {
//     // Put code here to be run every loop

// }


void ColorWheel::printClosestColor()
{
    frc::Color sensedColor = m_colorSensor.GetColor();
    std::cout << "Red: " << sensedColor.red << ", Blue: " << sensedColor.blue << ", Green: " << sensedColor.green << std::endl;


    bool foundColor = false;
    double confidenceFactor = 0.75;
    if(kBlueTarget == m_colorMatcher.MatchColor(kBlueTarget, confidenceFactor))
    {
        std::cout << "Found Blue";
        foundColor = true;
    }
    if(kGreenTarget == m_colorMatcher.MatchColor(kGreenTarget, confidenceFactor))
    {
        std::cout << "Found Green";
        foundColor = true;
    }
    if(kYellowTarget == m_colorMatcher.MatchColor(kYellowTarget, confidenceFactor))
    {
        std::cout << "Found Yellow";
        foundColor = true;
    }
    if(kRedTarget == m_colorMatcher.MatchColor(kRedTarget, confidenceFactor))
    {
        std::cout << "Found Red";
        foundColor = true;
    }

    if(!foundColor)
    {
        std::cout << "Did Not Match Color";
    }

    std::cout << std::endl;
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

