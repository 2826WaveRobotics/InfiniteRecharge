// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Subsystems/VisionPID.h"
#include "frc/SmartDashboard/SmartDashboard.h"
#include "frc/LiveWindow/LiveWindow.h"
#include "Reference.h"

VisionPID::VisionPID() : PIDSubsystem("VisionPID", 1.0, 0.0, 0.0) {
    SetAbsoluteTolerance(0.2);
    GetPIDController()->SetContinuous(false);
    //GetPIDController()->SetName("VisionPID", "PIDSubsystem Controller");
    AddChild(GetPIDController());


    junkTurretEncoder.reset(new frc::Encoder(0, 1, false, frc::Encoder::k4X));
    //AddChild("JunkTurretEncoder", junkTurretEncoder);
    junkTurretEncoder->SetDistancePerPulse(1.0);
    junkTurretEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    
    turretMotor.reset(new WPI_TalonSRX(TURRET));

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
}

double VisionPID::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;

    return junkTurretEncoder->PIDGet();

}

void VisionPID::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);

turretMotor->PIDWrite(output);

}

void VisionPID::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());

}



