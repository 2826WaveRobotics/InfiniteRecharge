// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Subsystems/ShooterPID.h"
#include "frc/SmartDashboard/SmartDashboard.h"
#include "frc/LiveWindow/LiveWindow.h"
#include "Reference.h"

ShooterPID::ShooterPID() : PIDSubsystem("ShooterPID", 1.0, 0.0, 0.0) {
    SetAbsoluteTolerance(0.2);
    GetPIDController()->SetContinuous(false);
    //GetPIDController()->SetName("ShooterPID", "PIDSubsystem Controller");
    AddChild(GetPIDController());

    shooter1.reset(new WPI_TalonSRX(SHOOTER_1));
    shooter2.reset(new WPI_TalonSRX(SHOOTER_2));
    shooterGroup = std::make_shared<frc::SpeedControllerGroup>(*shooter1, *shooter2  );
    //AddChild("ShooterGroup", shooterGroup);

    junkShooterEncoder.reset(new frc::Encoder(2, 3, false, frc::Encoder::k4X));
    //AddChild("JunkShooterEncoder", junkShooterEncoder);
    junkShooterEncoder->SetDistancePerPulse(1.0);
    junkShooterEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);

        // Use these to get going:
        // SetSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // Enable() - Enables the PID controller.

}

double ShooterPID::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;

    //shooter1.get()->GetSensorCollection().GetAnalogInRaw();  //Need to get raw speed. Will probably have to reference the CTRE software

//In this function, read the velocity from the Spark Max and return it's value because it arrives in RPM

    return junkShooterEncoder->PIDGet();
}

void ShooterPID::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);

//In this function, floor the "output" value to zero before passing it to the motor group.


    shooterGroup->PIDWrite(output);
}

void ShooterPID::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
}


