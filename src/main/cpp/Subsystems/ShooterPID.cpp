// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Subsystems/ShooterPID.h"
#include "Reference.h"

using namespace rev;

ShooterPID::ShooterPID() : PIDSubsystem(frc2::PIDController( 1.0, 0.0, 0.0)),
    pidController(GetController())
 {
    pidController.DisableContinuousInput();
    pidController.SetTolerance(0.2);
    
    shooter1 = new WPI_TalonFX(SHOOTER_1);
    shooter2 = new WPI_TalonFX(SHOOTER_2);
    shooterGroup = new frc::SpeedControllerGroup(*shooter1, *shooter2);
    tower1 = new CANSparkMax(TOWER_1, CANSparkMaxLowLevel::MotorType::kBrushless);
    tower2 = new CANSparkMax(TOWER_2, CANSparkMaxLowLevel::MotorType::kBrushless);
    towerGroup = new frc::SpeedControllerGroup(*tower1, *tower2);
        // Use these to get going:
        // SetSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // Enable() - Enables the PID controller.

}

double ShooterPID::GetMeasurement() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;

    return shooter1->GetSensorCollection().GetIntegratedSensorVelocity();  //Need to get raw speed. Will probably have to reference the CTRE software

}

void ShooterPID::UseOutput(double output, double setpoint) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);

//In this function, floor the "output" value to zero before passing it to the motor group.


    shooterGroup->PIDWrite(output);
}

void ShooterPID::SetShooterSpeed(double rpm)
{
    SetSetpoint(rpm);
}


